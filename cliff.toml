# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[remote.github]
owner = "DroidWorksStudio"
repo = "yam_launcher"

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file. See [conventional commits](https://www.conventionalcommits.org/) for commit guidelines.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}](<REPO>/tree/{{ version }}) - ({{ timestamp | date(format="%d, %B %Y") }})
{% else %}\
    ## [Coming Soon](<REPO>/tree/HEAD)
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- Generated by DroidWorks Studio -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
    { pattern = '<REPO>', replace = "https://github.com/DroidWorksStudio/yam_launcher" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = true
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Replace issue numbers
    { pattern = "\\(#([0-9]+)\\)", replace = "([#${1}](<REPO>/issues/${1}))"},
    # Replace Merge pull requests
    { pattern = "Merge pull request #([0-9]+) from [^ ]+", replace = "PR # [${1}](<REPO>/pull/${1}):"},
    # Replace Signed-off-by
    { pattern = "Signed-off-by: HeCodes2Much <wayne6324@gmail.com>", replace = ""},
    { pattern = "Signed-off-by: The-Repo-Club <wayne6324@gmail.com>", replace = ""},
    { pattern = "Signed-off-by: CreativeCodeCat <wayne6324@gmail.com>", replace = ""}
    # Check spelling of the commit with https://github.com/crate-ci/typos
    # If the spelling is incorrect, it will be automatically fixed.
    # { pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(change.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^fixes|^Fixes", skip = true },
    { message = "^feat|^Feat", group = "<!-- 0 -->Implemented Enhancements:" },
    { message = "^fix|^bug|^Fix|^Bug", group = "<!-- 1 -->Bug Fixes:" },
    { message = "^lang|^Lang", group = "<!-- 2 -->Language Support:" },
    { message = "^doc|^Doc", group = "<!-- 3 -->Documentation:" },
    { message = "^perf|^Perf", group = "<!-- 4 -->Performance Improvements:" },
    { message = "^refactor|^Refactor", group = "<!-- 5 -->Refactoring:" },
    { message = "^style|^Style", group = "<!-- 6 -->Styling Changes:" },
    { message = "^security|^Security", group = "<!-- 7 -->Security Updates:" },
    { message = "^revert|^Revert", group = "<!-- 8 -->Reverts:" },
    { message = "^release|^Release", group = "<!-- 9 -->Releases:" },
    { message = "^dependency|^deps|^Dependency|^Deps", group = "<!-- 10 -->Dependency Updates:" },
    { message = "^ci|^pipeline|^Ci|^Pipeline", group = "<!-- 11 -->Continuous Integration (CI):" },
    { message = "^chore|^housekeeping|^Chore|^Housekeeping", group = "<!-- 12 -->Chore:" },
    { message = "^version|^versioning|^Version|^Versioning", group = "<!-- 13 -->Versioning:" },
    { message = "^config|^configuration|^Config|^Configuration", group = "<!-- 14 -->Configuration Changes:" },
    { message = "^cleanup|^clean\\(up\\)|^Cleanup|^Clean\\(up\\)", group = "<!-- 15 -->Code Cleanup:" },
    { message = "^drop|^remove|^Drop|^Remove", group = "<!-- 16 -->Feature Removal:" },
    { message = "^hotfix|^emergency|^Hotfix|^Emergency", group = "<!-- 17 -->Hotfixes:" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "[0-9].*"
# regex for skipping tags
# skip_tags = ""
# regex for ignoring tags
# ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
# limit the number of commits included in the changelog.
# limit_commits = 250